/**
 * generated by Xtext 2.10.0
 */
package kcl.ac.uk.xtext.annotationsStores.impl;

import java.util.Collection;

import kcl.ac.uk.xtext.annotationsStores.AnnotationStores;
import kcl.ac.uk.xtext.annotationsStores.AnnotationsStoresPackage;
import kcl.ac.uk.xtext.annotationsStores.ArgumentStore;
import kcl.ac.uk.xtext.annotationsStores.ChallengeStore;
import kcl.ac.uk.xtext.annotationsStores.CommitmentStore;
import kcl.ac.uk.xtext.annotationsStores.ProposalStore;
import kcl.ac.uk.xtext.annotationsStores.QuestionStore;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Annotation Stores</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link kcl.ac.uk.xtext.annotationsStores.impl.AnnotationStoresImpl#getProposalElements <em>Proposal Elements</em>}</li>
 *   <li>{@link kcl.ac.uk.xtext.annotationsStores.impl.AnnotationStoresImpl#getQuestionElements <em>Question Elements</em>}</li>
 *   <li>{@link kcl.ac.uk.xtext.annotationsStores.impl.AnnotationStoresImpl#getChallengeElements <em>Challenge Elements</em>}</li>
 *   <li>{@link kcl.ac.uk.xtext.annotationsStores.impl.AnnotationStoresImpl#getCommitmentElements <em>Commitment Elements</em>}</li>
 *   <li>{@link kcl.ac.uk.xtext.annotationsStores.impl.AnnotationStoresImpl#getArgumentElements <em>Argument Elements</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AnnotationStoresImpl extends MinimalEObjectImpl.Container implements AnnotationStores
{
  /**
   * The cached value of the '{@link #getProposalElements() <em>Proposal Elements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProposalElements()
   * @generated
   * @ordered
   */
  protected EList<ProposalStore> proposalElements;

  /**
   * The cached value of the '{@link #getQuestionElements() <em>Question Elements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getQuestionElements()
   * @generated
   * @ordered
   */
  protected EList<QuestionStore> questionElements;

  /**
   * The cached value of the '{@link #getChallengeElements() <em>Challenge Elements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChallengeElements()
   * @generated
   * @ordered
   */
  protected EList<ChallengeStore> challengeElements;

  /**
   * The cached value of the '{@link #getCommitmentElements() <em>Commitment Elements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCommitmentElements()
   * @generated
   * @ordered
   */
  protected EList<CommitmentStore> commitmentElements;

  /**
   * The cached value of the '{@link #getArgumentElements() <em>Argument Elements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArgumentElements()
   * @generated
   * @ordered
   */
  protected EList<ArgumentStore> argumentElements;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AnnotationStoresImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AnnotationsStoresPackage.Literals.ANNOTATION_STORES;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ProposalStore> getProposalElements()
  {
    if (proposalElements == null)
    {
      proposalElements = new EObjectContainmentEList<ProposalStore>(ProposalStore.class, this, AnnotationsStoresPackage.ANNOTATION_STORES__PROPOSAL_ELEMENTS);
    }
    return proposalElements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<QuestionStore> getQuestionElements()
  {
    if (questionElements == null)
    {
      questionElements = new EObjectContainmentEList<QuestionStore>(QuestionStore.class, this, AnnotationsStoresPackage.ANNOTATION_STORES__QUESTION_ELEMENTS);
    }
    return questionElements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ChallengeStore> getChallengeElements()
  {
    if (challengeElements == null)
    {
      challengeElements = new EObjectContainmentEList<ChallengeStore>(ChallengeStore.class, this, AnnotationsStoresPackage.ANNOTATION_STORES__CHALLENGE_ELEMENTS);
    }
    return challengeElements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<CommitmentStore> getCommitmentElements()
  {
    if (commitmentElements == null)
    {
      commitmentElements = new EObjectContainmentEList<CommitmentStore>(CommitmentStore.class, this, AnnotationsStoresPackage.ANNOTATION_STORES__COMMITMENT_ELEMENTS);
    }
    return commitmentElements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ArgumentStore> getArgumentElements()
  {
    if (argumentElements == null)
    {
      argumentElements = new EObjectContainmentEList<ArgumentStore>(ArgumentStore.class, this, AnnotationsStoresPackage.ANNOTATION_STORES__ARGUMENT_ELEMENTS);
    }
    return argumentElements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AnnotationsStoresPackage.ANNOTATION_STORES__PROPOSAL_ELEMENTS:
        return ((InternalEList<?>)getProposalElements()).basicRemove(otherEnd, msgs);
      case AnnotationsStoresPackage.ANNOTATION_STORES__QUESTION_ELEMENTS:
        return ((InternalEList<?>)getQuestionElements()).basicRemove(otherEnd, msgs);
      case AnnotationsStoresPackage.ANNOTATION_STORES__CHALLENGE_ELEMENTS:
        return ((InternalEList<?>)getChallengeElements()).basicRemove(otherEnd, msgs);
      case AnnotationsStoresPackage.ANNOTATION_STORES__COMMITMENT_ELEMENTS:
        return ((InternalEList<?>)getCommitmentElements()).basicRemove(otherEnd, msgs);
      case AnnotationsStoresPackage.ANNOTATION_STORES__ARGUMENT_ELEMENTS:
        return ((InternalEList<?>)getArgumentElements()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AnnotationsStoresPackage.ANNOTATION_STORES__PROPOSAL_ELEMENTS:
        return getProposalElements();
      case AnnotationsStoresPackage.ANNOTATION_STORES__QUESTION_ELEMENTS:
        return getQuestionElements();
      case AnnotationsStoresPackage.ANNOTATION_STORES__CHALLENGE_ELEMENTS:
        return getChallengeElements();
      case AnnotationsStoresPackage.ANNOTATION_STORES__COMMITMENT_ELEMENTS:
        return getCommitmentElements();
      case AnnotationsStoresPackage.ANNOTATION_STORES__ARGUMENT_ELEMENTS:
        return getArgumentElements();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AnnotationsStoresPackage.ANNOTATION_STORES__PROPOSAL_ELEMENTS:
        getProposalElements().clear();
        getProposalElements().addAll((Collection<? extends ProposalStore>)newValue);
        return;
      case AnnotationsStoresPackage.ANNOTATION_STORES__QUESTION_ELEMENTS:
        getQuestionElements().clear();
        getQuestionElements().addAll((Collection<? extends QuestionStore>)newValue);
        return;
      case AnnotationsStoresPackage.ANNOTATION_STORES__CHALLENGE_ELEMENTS:
        getChallengeElements().clear();
        getChallengeElements().addAll((Collection<? extends ChallengeStore>)newValue);
        return;
      case AnnotationsStoresPackage.ANNOTATION_STORES__COMMITMENT_ELEMENTS:
        getCommitmentElements().clear();
        getCommitmentElements().addAll((Collection<? extends CommitmentStore>)newValue);
        return;
      case AnnotationsStoresPackage.ANNOTATION_STORES__ARGUMENT_ELEMENTS:
        getArgumentElements().clear();
        getArgumentElements().addAll((Collection<? extends ArgumentStore>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AnnotationsStoresPackage.ANNOTATION_STORES__PROPOSAL_ELEMENTS:
        getProposalElements().clear();
        return;
      case AnnotationsStoresPackage.ANNOTATION_STORES__QUESTION_ELEMENTS:
        getQuestionElements().clear();
        return;
      case AnnotationsStoresPackage.ANNOTATION_STORES__CHALLENGE_ELEMENTS:
        getChallengeElements().clear();
        return;
      case AnnotationsStoresPackage.ANNOTATION_STORES__COMMITMENT_ELEMENTS:
        getCommitmentElements().clear();
        return;
      case AnnotationsStoresPackage.ANNOTATION_STORES__ARGUMENT_ELEMENTS:
        getArgumentElements().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AnnotationsStoresPackage.ANNOTATION_STORES__PROPOSAL_ELEMENTS:
        return proposalElements != null && !proposalElements.isEmpty();
      case AnnotationsStoresPackage.ANNOTATION_STORES__QUESTION_ELEMENTS:
        return questionElements != null && !questionElements.isEmpty();
      case AnnotationsStoresPackage.ANNOTATION_STORES__CHALLENGE_ELEMENTS:
        return challengeElements != null && !challengeElements.isEmpty();
      case AnnotationsStoresPackage.ANNOTATION_STORES__COMMITMENT_ELEMENTS:
        return commitmentElements != null && !commitmentElements.isEmpty();
      case AnnotationsStoresPackage.ANNOTATION_STORES__ARGUMENT_ELEMENTS:
        return argumentElements != null && !argumentElements.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //AnnotationStoresImpl
