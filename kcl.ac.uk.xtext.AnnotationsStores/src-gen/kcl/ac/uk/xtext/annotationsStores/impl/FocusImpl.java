/**
 * generated by Xtext 2.10.0
 */
package kcl.ac.uk.xtext.annotationsStores.impl;

import kcl.ac.uk.xtext.annotationsStores.AnnotationsStoresPackage;
import kcl.ac.uk.xtext.annotationsStores.Focus;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Focus</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link kcl.ac.uk.xtext.annotationsStores.impl.FocusImpl#getFocus <em>Focus</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FocusImpl extends MinimalEObjectImpl.Container implements Focus
{
  /**
   * The default value of the '{@link #getFocus() <em>Focus</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFocus()
   * @generated
   * @ordered
   */
  protected static final String FOCUS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFocus() <em>Focus</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFocus()
   * @generated
   * @ordered
   */
  protected String focus = FOCUS_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FocusImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AnnotationsStoresPackage.Literals.FOCUS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getFocus()
  {
    return focus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFocus(String newFocus)
  {
    String oldFocus = focus;
    focus = newFocus;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AnnotationsStoresPackage.FOCUS__FOCUS, oldFocus, focus));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AnnotationsStoresPackage.FOCUS__FOCUS:
        return getFocus();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AnnotationsStoresPackage.FOCUS__FOCUS:
        setFocus((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AnnotationsStoresPackage.FOCUS__FOCUS:
        setFocus(FOCUS_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AnnotationsStoresPackage.FOCUS__FOCUS:
        return FOCUS_EDEFAULT == null ? focus != null : !FOCUS_EDEFAULT.equals(focus);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (focus: ");
    result.append(focus);
    result.append(')');
    return result.toString();
  }

} //FocusImpl
