/**
 * generated by Xtext 2.10.0
 */
package kcl.ac.uk.xtext.annotationsStores.util;

import kcl.ac.uk.xtext.annotationsStores.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see kcl.ac.uk.xtext.annotationsStores.AnnotationsStoresPackage
 * @generated
 */
public class AnnotationsStoresAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static AnnotationsStoresPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AnnotationsStoresAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = AnnotationsStoresPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AnnotationsStoresSwitch<Adapter> modelSwitch =
    new AnnotationsStoresSwitch<Adapter>()
    {
      @Override
      public Adapter caseAnnotationStores(AnnotationStores object)
      {
        return createAnnotationStoresAdapter();
      }
      @Override
      public Adapter caseProposalStore(ProposalStore object)
      {
        return createProposalStoreAdapter();
      }
      @Override
      public Adapter caseQuestionStore(QuestionStore object)
      {
        return createQuestionStoreAdapter();
      }
      @Override
      public Adapter caseChallengeStore(ChallengeStore object)
      {
        return createChallengeStoreAdapter();
      }
      @Override
      public Adapter caseCommitmentStore(CommitmentStore object)
      {
        return createCommitmentStoreAdapter();
      }
      @Override
      public Adapter caseArgumentStore(ArgumentStore object)
      {
        return createArgumentStoreAdapter();
      }
      @Override
      public Adapter caseScope(Scope object)
      {
        return createScopeAdapter();
      }
      @Override
      public Adapter caseFocus(Focus object)
      {
        return createFocusAdapter();
      }
      @Override
      public Adapter caseEffect(Effect object)
      {
        return createEffectAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link kcl.ac.uk.xtext.annotationsStores.AnnotationStores <em>Annotation Stores</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see kcl.ac.uk.xtext.annotationsStores.AnnotationStores
   * @generated
   */
  public Adapter createAnnotationStoresAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link kcl.ac.uk.xtext.annotationsStores.ProposalStore <em>Proposal Store</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see kcl.ac.uk.xtext.annotationsStores.ProposalStore
   * @generated
   */
  public Adapter createProposalStoreAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link kcl.ac.uk.xtext.annotationsStores.QuestionStore <em>Question Store</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see kcl.ac.uk.xtext.annotationsStores.QuestionStore
   * @generated
   */
  public Adapter createQuestionStoreAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link kcl.ac.uk.xtext.annotationsStores.ChallengeStore <em>Challenge Store</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see kcl.ac.uk.xtext.annotationsStores.ChallengeStore
   * @generated
   */
  public Adapter createChallengeStoreAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link kcl.ac.uk.xtext.annotationsStores.CommitmentStore <em>Commitment Store</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see kcl.ac.uk.xtext.annotationsStores.CommitmentStore
   * @generated
   */
  public Adapter createCommitmentStoreAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link kcl.ac.uk.xtext.annotationsStores.ArgumentStore <em>Argument Store</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see kcl.ac.uk.xtext.annotationsStores.ArgumentStore
   * @generated
   */
  public Adapter createArgumentStoreAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link kcl.ac.uk.xtext.annotationsStores.Scope <em>Scope</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see kcl.ac.uk.xtext.annotationsStores.Scope
   * @generated
   */
  public Adapter createScopeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link kcl.ac.uk.xtext.annotationsStores.Focus <em>Focus</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see kcl.ac.uk.xtext.annotationsStores.Focus
   * @generated
   */
  public Adapter createFocusAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link kcl.ac.uk.xtext.annotationsStores.Effect <em>Effect</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see kcl.ac.uk.xtext.annotationsStores.Effect
   * @generated
   */
  public Adapter createEffectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //AnnotationsStoresAdapterFactory
