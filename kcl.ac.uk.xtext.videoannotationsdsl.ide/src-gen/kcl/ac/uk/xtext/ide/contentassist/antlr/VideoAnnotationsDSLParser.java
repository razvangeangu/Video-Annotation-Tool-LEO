/*
 * generated by Xtext 2.10.0
 */
package kcl.ac.uk.xtext.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import kcl.ac.uk.xtext.ide.contentassist.antlr.internal.InternalVideoAnnotationsDSLParser;
import kcl.ac.uk.xtext.services.VideoAnnotationsDSLGrammarAccess;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class VideoAnnotationsDSLParser extends AbstractContentAssistParser {

	@Inject
	private VideoAnnotationsDSLGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalVideoAnnotationsDSLParser createParser() {
		InternalVideoAnnotationsDSLParser result = new InternalVideoAnnotationsDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getMoveAccess().getTypeAlternatives_0(), "rule__Move__TypeAlternatives_0");
					put(grammarAccess.getScopeAccess().getScopeAlternatives_0(), "rule__Scope__ScopeAlternatives_0");
					put(grammarAccess.getFocusAccess().getFocusAlternatives_0(), "rule__Focus__FocusAlternatives_0");
					put(grammarAccess.getAnnotationAccess().getGroup(), "rule__Annotation__Group__0");
					put(grammarAccess.getAnnotationAccess().getGroup_16(), "rule__Annotation__Group_16__0");
					put(grammarAccess.getAnnotationAccess().getGroup_18(), "rule__Annotation__Group_18__0");
					put(grammarAccess.getAnnotationAccess().getGroup_20(), "rule__Annotation__Group_20__0");
					put(grammarAccess.getAnnotatedVideoAccess().getAnnotationsAssignment(), "rule__AnnotatedVideo__AnnotationsAssignment");
					put(grammarAccess.getAnnotationAccess().getFromTimeAssignment_1(), "rule__Annotation__FromTimeAssignment_1");
					put(grammarAccess.getAnnotationAccess().getToTimeAssignment_3(), "rule__Annotation__ToTimeAssignment_3");
					put(grammarAccess.getAnnotationAccess().getNameAssignment_6(), "rule__Annotation__NameAssignment_6");
					put(grammarAccess.getAnnotationAccess().getSenderAssignment_8(), "rule__Annotation__SenderAssignment_8");
					put(grammarAccess.getAnnotationAccess().getTypeAssignment_10(), "rule__Annotation__TypeAssignment_10");
					put(grammarAccess.getAnnotationAccess().getScopeAssignment_12(), "rule__Annotation__ScopeAssignment_12");
					put(grammarAccess.getAnnotationAccess().getFocusAssignment_14(), "rule__Annotation__FocusAssignment_14");
					put(grammarAccess.getAnnotationAccess().getContentLabelAssignment_16_0(), "rule__Annotation__ContentLabelAssignment_16_0");
					put(grammarAccess.getAnnotationAccess().getContentAssignment_17(), "rule__Annotation__ContentAssignment_17");
					put(grammarAccess.getAnnotationAccess().getTargetAssignment_18_1(), "rule__Annotation__TargetAssignment_18_1");
					put(grammarAccess.getAnnotationAccess().getCommentAssignment_20_1(), "rule__Annotation__CommentAssignment_20_1");
					put(grammarAccess.getMoveAccess().getTypeAssignment(), "rule__Move__TypeAssignment");
					put(grammarAccess.getScopeAccess().getScopeAssignment(), "rule__Scope__ScopeAssignment");
					put(grammarAccess.getFocusAccess().getFocusAssignment(), "rule__Focus__FocusAssignment");
					put(grammarAccess.getTimeAccess().getSecAssignment(), "rule__Time__SecAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalVideoAnnotationsDSLParser typedParser = (InternalVideoAnnotationsDSLParser) parser;
			typedParser.entryRuleAnnotatedVideo();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public VideoAnnotationsDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(VideoAnnotationsDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
